{"version":3,"sources":["Providers/NotifyProvider.jsx","data/constants.js","Providers/CommonProvider.jsx","components/ExpandBtn/ExpandBtn.jsx","helpers/helpers.js","components/TableComponents/DashboardTable.jsx","components/MapComponents/InteractiveMap.jsx","assets/icons/rs_school_js.svg","components/Footer/Footer.jsx","components/Header/Header.jsx","services/requests.js","components/Alerts/Alerts.jsx","components/Loader/Loader.jsx","hooks/useScript.jsx","components/Input/Input.jsx","components/CountryList/CountryList.jsx","components/Charts/Charts.jsx","components/DropdownDisplayOptions/DropdownDisplayOptions.jsx","components/FilterCommon/Switcher.jsx","components/FilterCommon/FilterForm.jsx","components/FilterCommon/FilterCommon.jsx","components/MapComponents/GeojsonView.jsx","components/MapComponents/Legend.jsx","components/MapComponents/RenderOverlay.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["NotifyContext","React","createContext","notify","addNotify","removeNotify","NotifyProvider","children","useState","setNotify","contextValue","useCallback","type","headerText","contentText","setTimeout","Provider","value","HEADINGS","ERROR_HEADER","ERROR_MESSAGE","WHOLE_WORLD_NAME","NOTIFY_TYPES","VARIANTS_FOR_DISPLAYING","cases","deaths","recovered","TODAY","COLORS","low","medium","hight","CommonContext","currentCountry","name","code","population","selectCountry","showingData","changeShowingData","isFor100","changeIsFor100","isFullScreenOptions","changeIsFullScreenOptions","isLastDay","changeSelectedPeriod","changePopulation","CommonProvider","constants","setCurrentCountry","setShowingData","data","setIsFor100","status","setSelectedPeriod","period","setIsFullScreenOptions","setPopulation","count","ExpandBtn","setIsFullScreenSize","isFullScreenSize","useContext","onClick","aria-label","className","countFor100","Math","round","getRoundField","rank","floor","log10","number","getDataForPeriod","selectedPeriod","currShowingData","DashboardTable","memo","responseData","responseDataWorld","getTotalPopulation","country","find","el","countryInfo","iso3","getTableData","renderTableRows","useMemo","periodData","lastDay","result","confirmed","todayCases","todayDeaths","todayRecovered","getDataForPeriodDashboard","totalPopulation","toLocaleString","Table","map","heading","colSpan","length","defaultProps","InteractiveMap","GeojsonView","renderOverlay","countryCode","style","setStyle","setMap","WhenMapCreated","mapInstance","addTo","positionCalc","position","lat","long","useEffect","mapStyle","L","mapboxGL","accessToken","invalidateSize","StyleView","setView","getZoom","MapContainer","id","fullscreenControl","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","whenCreated","preferCanvas","Footer","alt","src","logo","href","Header","getCovidInfo","a","axios","get","covidInfo","getCovidInfoWorld","covidInfoWorld","getCovidHistory","covidHistory","getGeojson","countries","Alerts","Alert","variant","onClose","dismissible","Heading","Loader","color","size","Spinner","animation","role","useScript","url","script","document","createElement","async","body","appendChild","removeChild","Input","filterCountries","placeholder","textRef","useRef","ref","onChange","current","CountryList","countriesList","setCountries","currShowingDataForPeriod","sortedCountries","countriesSort","sort","b","for100Data","filter","toLowerCase","includes","onCountryClick","striped","hover","flag","Charts","chartsList","countryName","countryPopulation","dataWithPer100","populationCount","item","casesIsFor100","deathsIsFor100","recoveredIsFor100","customizeTooltip","pointInfo","text","argumentText","height","width","dataSource","title","theme","argumentField","valueField","allowDecimals","enabled","zIndex","DropdownDisplayOptions","setCurrShowingData","options","selectedKey","Dropdown","onSelect","e","Toggle","Menu","Object","keys","key","Item","eventKey","Switcher","handleOnChange","label","checked","Form","Check","FilterForm","switcherFor100","periodSwitcher","handleIsFor100","handleSelectedPeriod","FilterCommon","handleGeojson","isCountryExists","geojsonStyle","weight","fillOpacity","GeoJSON","features","onEachFeature","feature","layer","properties","tooltipText","on","click","ISO_A3","mouseover","activeFeature","target","bindTooltip","closeButton","offset","point","sticky","openTooltip","mouseout","unbindTooltip","Legend","boundaries","layers","firstBoundary","secondBoundary","legendKeys","backgroundColor","RenderOverlay","customMarkerIcon","intensity","getIntensity","divIcon","html","covidData","min","reduce","acc","curr","difference","getBoundary","element","Marker","icon","eventHandlers","App","info","setInfo","geoJson","setGeoJson","infoWorld","setInfoWorld","history","setHistory","isLoading","setIsLoading","requestService","getWorldGeojson","geoJsonWorld","timeline","arrayForChart","entries","forEach","obj","i","day","push","getAllData","renderTable","renderGeoJsonView","Container","fluid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b1dd4005.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const NotifyContext = React.createContext({\r\n  notify: null,\r\n  addNotify: () => {},\r\n  removeNotify: () => {},\r\n});\r\n\r\nexport default function NotifyProvider({ children }) {\r\n  const [notify, setNotify] = useState(null);\r\n\r\n  const removeNotify = () => setNotify(null);\r\n\r\n  const addNotify = (type, headerText, contentText) => {\r\n    setNotify({ type, headerText, contentText });\r\n    setTimeout(removeNotify, 3000);\r\n  };\r\n\r\n  const contextValue = {\r\n    notify,\r\n    addNotify: useCallback((type, headerText, contentText) => addNotify(type, headerText, contentText), []),\r\n    removeNotify: useCallback(() => removeNotify(), []),\r\n  };\r\n\r\n  return <NotifyContext.Provider value={contextValue}>{children}</NotifyContext.Provider>;\r\n}\r\n\r\nNotifyProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n","export const PERIODS = {\r\n  wholePeriod: 'wholePeriod',\r\n  lastDay: 'lastDay',\r\n};\r\n\r\nexport const HEADINGS = ['confirmed', 'deaths', 'recovered'];\r\n\r\nexport const ERROR_HEADER = 'Error';\r\nexport const ERROR_MESSAGE = 'Please, try later!';\r\nexport const CACHING_DATA_MESSAGE = 'Caching in progress';\r\nexport const WHOLE_WORLD_NAME = 'Whole world';\r\nexport const PER_100_THOUSANDS = 100000;\r\n\r\nexport const NOTIFY_TYPES = {\r\n  error: 'danger',\r\n  primary: 'primary',\r\n  secondary: 'secondary',\r\n  success: 'success',\r\n  warning: 'warning',\r\n  info: 'info',\r\n  dark: 'dark',\r\n  light: 'light',\r\n};\r\n\r\nexport const VARIANTS_FOR_DISPLAYING = {\r\n  cases: 'Number of cases',\r\n  deaths: 'Number of deaths',\r\n  recovered: 'Number of recovered',\r\n};\r\n\r\nexport const TODAY = {\r\n  cases: 'todayCases',\r\n  deaths: 'todayDeaths',\r\n  recovered: 'todayRecovered',\r\n\r\n};\r\n\r\nexport const DEFAULT_ZOOM = 3;\r\nexport const COUNTRY_ZOOM = 4;\r\n\r\nexport const DEFAULT_LAT = 60;\r\nexport const DEFAULT_LONG = 100;\r\n\r\nexport const MAP_SWITCHER = { label: 'per 100,000 population', id: 'mapSwitcher' };\r\nexport const COUNTRY_SWITCHER = { label: 'per 100,000 population', id: 'countrySwitcher' };\r\n\r\nexport const FIRST_DIVISION = 10 / 100;\r\nexport const SECOND_DIVISION = 50 / 100;\r\n\r\nexport const COLORS = { low: '#ffae00', medium: '#ff6600', hight: '#ff1e00' };\r\n\r\nexport const MAPBOX_STYLE = 'mapbox://styles/sizaya/ckireok4h7hjv17nrqcxeyzkc';\r\nexport const MAPBOX_KEY = 'pk.eyJ1Ijoic2l6YXlhIiwiYSI6ImNraW4zMGk2aDB6Y2kzMnFqM3k3dHd1cTEifQ.C4b5ctgb9K4koJwzcTycZw';\r\n\r\nexport const KEYBOARD_URL = '/virtual-keyboard/index.js';\r\n","import React, { useState, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as constants from '../data/constants';\r\n\r\nexport const CommonContext = React.createContext({\r\n  currentCountry: { name: null, code: null, population: 0 },\r\n  selectCountry: () => {},\r\n  showingData: 'cases',\r\n  changeShowingData: () => {},\r\n  isFor100: false,\r\n  changeIsFor100: () => {},\r\n  isFullScreenOptions: false,\r\n  changeIsFullScreenOptions: () => {},\r\n  isLastDay: constants.PERIODS.wholePeriod,\r\n  changeSelectedPeriod: () => {},\r\n  population: 0,\r\n  changePopulation: () => {},\r\n});\r\n\r\nexport default function CommonProvider({ children }) {\r\n  const [currentCountry, setCurrentCountry] = useState({\r\n    name: constants.WHOLE_WORLD_NAME,\r\n    code: constants.WHOLE_WORLD_NAME,\r\n    population: 0,\r\n  });\r\n  const selectCountry = useCallback(({ name, code, population }) => setCurrentCountry({ name, code, population }), [\r\n    setCurrentCountry,\r\n  ]);\r\n\r\n  const [showingData, setShowingData] = useState('cases');\r\n  const changeShowingData = useCallback((data) => setShowingData(data), [setShowingData]);\r\n\r\n  const [isFor100, setIsFor100] = useState(false);\r\n  const changeIsFor100 = useCallback((status) => setIsFor100(status), [setIsFor100]);\r\n\r\n  const [isLastDay, setSelectedPeriod] = useState(false);\r\n  const changeSelectedPeriod = useCallback((period) => setSelectedPeriod(period), [setSelectedPeriod]);\r\n\r\n  const [isFullScreenOptions, setIsFullScreenOptions] = useState(false);\r\n  const changeIsFullScreenOptions = useCallback((status) => setIsFullScreenOptions(status), [setIsFullScreenOptions]);\r\n\r\n  const [population, setPopulation] = useState(0);\r\n  const changePopulation = useCallback((count) => setPopulation(count), [setPopulation]);\r\n\r\n  const contextValue = {\r\n    currentCountry,\r\n    selectCountry,\r\n    isLastDay,\r\n    changeSelectedPeriod,\r\n    showingData,\r\n    changeShowingData,\r\n    isFor100,\r\n    changeIsFor100,\r\n    isFullScreenOptions,\r\n    changeIsFullScreenOptions,\r\n    population,\r\n    changePopulation,\r\n  };\r\n\r\n  return <CommonContext.Provider value={contextValue}>{children}</CommonContext.Provider>;\r\n}\r\n\r\nCommonProvider.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n","import React, { useContext } from 'react';\r\nimport './ExpandBtn.scss';\r\nimport PropTypes from 'prop-types';\r\nimport { CommonContext } from '../../Providers/CommonProvider';\r\n\r\nconst ExpandBtn = ({ setIsFullScreenSize, isFullScreenSize }) => {\r\n  const { isFullScreenOptions, changeIsFullScreenOptions } = useContext(CommonContext);\r\n  const handleToddleWidth = () => {\r\n    setIsFullScreenSize(!isFullScreenSize);\r\n    changeIsFullScreenOptions(!isFullScreenOptions);\r\n  };\r\n\r\n  return (\r\n    <button\r\n      onClick={handleToddleWidth}\r\n      aria-label=\"expand\"\r\n      type=\"button\"\r\n      className={isFullScreenSize ? 'expand-btn shrink-background' : 'expand-btn'}\r\n    />\r\n  );\r\n};\r\n\r\nExpandBtn.propTypes = {\r\n  setIsFullScreenSize: PropTypes.func.isRequired,\r\n  isFullScreenSize: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default ExpandBtn;\r\n","import * as constants from '../data/constants';\r\n\r\nexport const countFor100 = (data, population) => {\r\n  if (population) {\r\n    return Math.round((data * constants.PER_100_THOUSANDS) / population);\r\n  }\r\n  return 0;\r\n};\r\n\r\nconst getRoundField = (data) => {\r\n  if (data < 10) return data;\r\n  const rank = Math.floor(Math.log10(data));\r\n  const number = 10 ** rank;\r\n  const roundedData = Math.round(data / number) * number;\r\n  return roundedData;\r\n};\r\n\r\nexport const getBoundary = (covidData) => {\r\n  const min = covidData.reduce((acc, curr) => (acc < curr ? acc : curr));\r\n  const max = covidData.reduce((acc, curr) => (acc > curr ? acc : curr));\r\n  const difference = max - min;\r\n  let firstBoundary = Math.floor(difference * constants.FIRST_DIVISION);\r\n  let secondBoundary = Math.floor(difference * constants.SECOND_DIVISION);\r\n\r\n  firstBoundary = getRoundField(firstBoundary);\r\n  secondBoundary = getRoundField(secondBoundary);\r\n  return { firstBoundary, secondBoundary };\r\n};\r\n\r\nexport const getDataForPeriod = (selectedPeriod, currShowingData) => {\r\n  let currShowingDataForPeriod;\r\n  if (selectedPeriod) {\r\n    currShowingDataForPeriod = constants.TODAY[currShowingData];\r\n  } else {\r\n    currShowingDataForPeriod = currShowingData;\r\n  }\r\n\r\n  return currShowingDataForPeriod;\r\n};\r\n\r\nexport const getDataForPeriodDashboard = (lastDay, data) => {\r\n  const result = {};\r\n  if (!lastDay) {\r\n    result.confirmed = data.cases;\r\n    result.deaths = data.deaths;\r\n    result.recovered = data.recovered;\r\n  } else {\r\n    result.confirmed = data.todayCases;\r\n    result.deaths = data.todayDeaths;\r\n    result.recovered = data.todayRecovered;\r\n  }\r\n  return result;\r\n};\r\n","import React, { useState, useMemo, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Table from 'react-bootstrap/Table';\r\nimport ExpandBtn from '../ExpandBtn/ExpandBtn';\r\nimport * as constants from '../../data/constants';\r\nimport { countFor100, getDataForPeriodDashboard } from '../../helpers/helpers';\r\nimport './DashboardTable.scss';\r\n\r\nconst DashboardTable = React.memo(({ responseData, responseDataWorld, currentCountry, isFor100, isLastDay }) => {\r\n  const [isFullScreenSize, setIsFullScreenSize] = useState(false);\r\n\r\n  const getTotalPopulation = useCallback(\r\n    (country) => {\r\n      let totalPopulation;\r\n      if (country === constants.WHOLE_WORLD_NAME) {\r\n        totalPopulation = responseDataWorld.population;\r\n      } else {\r\n        totalPopulation = responseData.find((el) => el.countryInfo.iso3 === country).population;\r\n      }\r\n      return totalPopulation;\r\n    },\r\n    [responseDataWorld, responseData],\r\n  );\r\n\r\n  const getTableData = useCallback(\r\n    (country, data) => {\r\n      if (country === constants.WHOLE_WORLD_NAME) {\r\n        return responseDataWorld;\r\n      }\r\n      const dataForCountry = data.find((el) => el.countryInfo.iso3 === country);\r\n      return dataForCountry;\r\n    },\r\n    [responseDataWorld],\r\n  );\r\n\r\n  const renderTableRows = useMemo(() => {\r\n    const data = getTableData(currentCountry.code, responseData);\r\n    const periodData = getDataForPeriodDashboard(isLastDay, data);\r\n    const totalPopulation = getTotalPopulation(currentCountry.code);\r\n    if (isFor100) {\r\n      periodData.confirmed = countFor100(periodData.confirmed, totalPopulation);\r\n      periodData.deaths = countFor100(periodData.deaths, totalPopulation);\r\n      periodData.recovered = countFor100(periodData.recovered, totalPopulation);\r\n    }\r\n    return (\r\n      <tr>\r\n        <td>{periodData.confirmed.toLocaleString('ru')}</td>\r\n        <td>{periodData.deaths.toLocaleString('ru')}</td>\r\n        <td>{periodData.recovered.toLocaleString('ru')}</td>\r\n      </tr>\r\n    );\r\n  }, [currentCountry.code, responseData, isLastDay, isFor100]);\r\n\r\n  return (\r\n    <div className={isFullScreenSize ? 'dashboard-table full-container' : 'dashboard-table'}>\r\n      <div className=\"table-wrapper\">\r\n        <ExpandBtn setIsFullScreenSize={setIsFullScreenSize} isFullScreenSize={isFullScreenSize} />\r\n        <h1 className=\"table-header\">\r\n          Info displayed for:&nbsp;\r\n          {currentCountry.name}\r\n        </h1>\r\n        <Table>\r\n          <thead>\r\n            <tr>\r\n              {constants.HEADINGS.map((heading) => (\r\n                <th key={heading}>{heading}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {responseData ? (\r\n              renderTableRows\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={constants.HEADINGS.length}>{constants.ERROR_MESSAGE}</td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nDashboardTable.propTypes = {\r\n  responseData: PropTypes.arrayOf(PropTypes.object),\r\n  responseDataWorld: PropTypes.objectOf(PropTypes.any),\r\n  currentCountry: PropTypes.objectOf(PropTypes.any).isRequired,\r\n  isFor100: PropTypes.bool.isRequired,\r\n  isLastDay: PropTypes.bool.isRequired,\r\n};\r\n\r\nDashboardTable.defaultProps = {\r\n  responseDataWorld: '',\r\n  responseData: '',\r\n};\r\n\r\nexport default DashboardTable;\r\n","import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { MapContainer } from 'react-leaflet';\r\nimport PropTypes from 'prop-types';\r\nimport {} from 'mapbox-gl-leaflet';\r\nimport L from 'leaflet';\r\nimport ExpandBtn from '../ExpandBtn/ExpandBtn';\r\nimport './InteractiveMap.scss';\r\nimport 'leaflet-fullscreen/dist/Leaflet.fullscreen';\r\nimport 'leaflet-fullscreen/dist/leaflet.fullscreen.css';\r\nimport * as constants from '../../data/constants';\r\n\r\nconst InteractiveMap = React.memo(({ responseData, GeojsonView, renderOverlay, countryCode }) => {\r\n  const [isFullScreenSize, setIsFullScreenSize] = useState(false);\r\n  const [style, setStyle] = useState('');\r\n  const [map, setMap] = useState('');\r\n\r\n  const WhenMapCreated = useCallback(\r\n    (mapInstance) => {\r\n      style.addTo(mapInstance);\r\n      setMap(mapInstance);\r\n    },\r\n    [style, setMap],\r\n  );\r\n\r\n  const positionCalc = useMemo(() => {\r\n    if (countryCode === constants.WHOLE_WORLD_NAME) {\r\n      return [constants.DEFAULT_LAT, constants.DEFAULT_LONG];\r\n    }\r\n    const position = responseData.find((el) => el.countryInfo.iso3 === countryCode);\r\n    if (!position) {\r\n      return [constants.DEFAULT_LAT, constants.DEFAULT_LONG];\r\n    }\r\n    return [position.countryInfo.lat, position.countryInfo.long];\r\n  }, [countryCode, responseData]);\r\n\r\n  useEffect(() => {\r\n    const mapStyle = L.mapboxGL({\r\n      style: constants.MAPBOX_STYLE,\r\n      accessToken: constants.MAPBOX_KEY,\r\n    });\r\n    setStyle(mapStyle);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (map) {\r\n      map.invalidateSize();\r\n    }\r\n  }, [isFullScreenSize]);\r\n\r\n  const StyleView = () => {\r\n    if (map) {\r\n      map.setView(positionCalc, map.getZoom() || constants.DEFAULT_ZOOM);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return responseData.length ? (\r\n    <div className={isFullScreenSize ? 'interactive-map full-container' : 'interactive-map'}>\r\n      <ExpandBtn setIsFullScreenSize={setIsFullScreenSize} isFullScreenSize={isFullScreenSize} />\r\n      <MapContainer\r\n        id=\"someID\"\r\n        fullscreenControl\r\n        attributionControl\r\n        zoomControl\r\n        doubleClickZoom\r\n        scrollWheelZoom\r\n        dragging\r\n        animate\r\n        whenCreated={WhenMapCreated}\r\n        preferCanvas\r\n      >\r\n        <StyleView />\r\n        {GeojsonView}\r\n        {renderOverlay}\r\n      </MapContainer>\r\n    </div>\r\n  ) : (\r\n    <div>{constants.ERROR_MESSAGE}</div>\r\n  );\r\n});\r\n\r\nInteractiveMap.propTypes = {\r\n  responseData: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  GeojsonView: PropTypes.element.isRequired,\r\n  renderOverlay: PropTypes.element.isRequired,\r\n  countryCode: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default InteractiveMap;\r\n","export default __webpack_public_path__ + \"static/media/rs_school_js.ad178c0d.svg\";","import React from 'react';\r\nimport logo from '../../assets/icons/rs_school_js.svg';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer>\r\n      <div className=\"footer-wrapper\">\r\n        <img alt=\"logo\" className=\"logo\" src={logo} />\r\n        <div>\r\n          <span>\r\n            by\r\n            {' '}\r\n            <a href=\"https://github.com/LiliyaSm\">LiliyaSm</a>\r\n          </span>\r\n          {' '}\r\n          <span>\r\n            and\r\n            {' '}\r\n            <a href=\"https://github.com/gentaliana\">Gentaliana</a>\r\n          </span>\r\n          {' '}\r\n          <a href=\"https://rs.school/js/\"> </a>\r\n        </div>\r\n        2020\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\n\r\nfunction Header() {\r\n  return <header className=\"header\">COVID-19 Dashboard</header>;\r\n}\r\n\r\nexport default Header;\r\n","import axios from 'axios';\r\n\r\nconst urlCovid = 'https://corona.lmao.ninja/v2/countries';\r\nconst urlCovidWorld = 'https://disease.sh/v3/covid-19/all';\r\nconst urlCovidHistory = 'https://disease.sh/v3/covid-19/historical/';\r\n\r\nconst getCovidInfo = async () => {\r\n  const covidInfo = await axios.get(urlCovid);\r\n  return covidInfo.data;\r\n};\r\n\r\nconst getCovidInfoWorld = async () => {\r\n  const covidInfoWorld = await axios.get(urlCovidWorld);\r\n  return covidInfoWorld.data;\r\n};\r\n\r\nconst getCovidHistory = async (country) => {\r\n  const covidHistory = await axios.get(`${urlCovidHistory}${country}`);\r\n  return covidHistory.data;\r\n};\r\n\r\nconst getGeojson = async () => {\r\n  const countries = await axios.get('countries.json');\r\n  return countries.data;\r\n};\r\n\r\nexport default { getCovidInfo, getCovidInfoWorld, getCovidHistory, getGeojson };\r\n","import React, { useContext } from 'react';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport './Alerts.scss';\r\nimport { NotifyContext } from '../../Providers/NotifyProvider';\r\n\r\nconst Alerts = () => {\r\n  const { notify, removeNotify } = useContext(NotifyContext);\r\n\r\n  return (\r\n    <div className=\"alert-message\">\r\n      <Alert variant={notify.type} onClose={removeNotify} dismissible>\r\n        <Alert.Heading>{notify.headerText}</Alert.Heading>\r\n        <p>{notify.contentText}</p>\r\n      </Alert>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Alerts;\r\n","import React from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Loader = ({ color, size, className }) => (\r\n  <Spinner animation=\"border\" role=\"status\" variant={color} size={size} className={className} />\r\n);\r\n\r\nLoader.propTypes = {\r\n  color: PropTypes.string,\r\n  size: PropTypes.string,\r\n  className: PropTypes.string,\r\n};\r\n\r\nLoader.defaultProps = {\r\n  color: '',\r\n  size: '',\r\n  className: '',\r\n};\r\n\r\nexport default Loader;\r\n","import { useEffect } from 'react';\r\n\r\nconst useScript = (url) => {\r\n  useEffect(() => {\r\n    const script = document.createElement('script');\r\n\r\n    script.src = url;\r\n    script.async = true;\r\n    script.type = 'module';\r\n\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      document.body.removeChild(script);\r\n    };\r\n  }, [url]);\r\n};\r\n\r\nexport default useScript;\r\n","import React, { useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Input.scss';\r\nimport useScript from '../../hooks/useScript';\r\nimport * as constants from '../../data/constants';\r\n\r\nconst Input = ({ filterCountries, placeholder }) => {\r\n  useScript(constants.KEYBOARD_URL);\r\n  const textRef = useRef();\r\n\r\n  const inputHandler = () => {\r\n    filterCountries(textRef.current.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"input__container\">\r\n      <input\r\n        ref={textRef}\r\n        type=\"text\"\r\n        className=\"use-keyboard-input\"\r\n        placeholder={placeholder}\r\n        onChange={inputHandler}\r\n      />\r\n      <span className=\"input__keyboard\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nInput.propTypes = {\r\n  filterCountries: PropTypes.func.isRequired,\r\n  placeholder: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Input;\r\n","import React, { useEffect, useState, useCallback, useMemo } from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\nimport PropTypes from 'prop-types';\r\nimport ExpandBtn from '../ExpandBtn/ExpandBtn';\r\nimport Input from '../Input/Input';\r\nimport * as constants from '../../data/constants';\r\nimport { countFor100, getDataForPeriod } from '../../helpers/helpers';\r\nimport './CountryList.scss';\r\n\r\nconst CountryList = React.memo(\r\n  ({ countriesList, countryCode, selectCountry, showingData, isFor100, isLastDay, population }) => {\r\n    const [isFullScreenSize, setIsFullScreenSize] = useState(false);\r\n    const [countries, setCountries] = useState([]);\r\n\r\n    const currShowingDataForPeriod = useMemo(() => getDataForPeriod(isLastDay, showingData), [isLastDay, showingData]);\r\n\r\n    const sortedCountries = useMemo(() => {\r\n      const countriesSort = [...countriesList];\r\n      countriesSort.sort((a, b) => b[currShowingDataForPeriod] - a[currShowingDataForPeriod]);\r\n      return countriesSort;\r\n    }, [countriesList, currShowingDataForPeriod]);\r\n\r\n    useEffect(() => {\r\n      if (isFor100) {\r\n        setCountries(\r\n          sortedCountries\r\n            .map((el) => ({ ...el, for100Data: countFor100(el[currShowingDataForPeriod], el.population) }))\r\n            .sort((a, b) => b.for100Data - a.for100Data),\r\n        );\r\n      } else {\r\n        setCountries(sortedCountries);\r\n      }\r\n    }, [sortedCountries, isFor100]);\r\n\r\n    const filterCountries = useCallback((value) => {\r\n      setCountries(sortedCountries.filter((el) => el.country.toLowerCase().includes(value.toLowerCase())));\r\n    });\r\n\r\n    const onCountryClick = useCallback((el) => {\r\n      if (countryCode === el.countryInfo.iso3) {\r\n        selectCountry({ name: constants.WHOLE_WORLD_NAME, code: constants.WHOLE_WORLD_NAME, population });\r\n      } else {\r\n        selectCountry({ name: el.country, code: el.countryInfo.iso3, population: el.population });\r\n      }\r\n    });\r\n\r\n    return (\r\n      <div className={isFullScreenSize ? 'wrapper full-container' : 'wrapper'}>\r\n        <ExpandBtn setIsFullScreenSize={setIsFullScreenSize} isFullScreenSize={isFullScreenSize} />\r\n        <Input filterCountries={filterCountries} placeholder=\"Country Enter\" />\r\n        <div className={isFullScreenSize ? 'country-list__fullscreen' : 'country-list'}>\r\n          <Table striped hover size=\"sm\" variant=\"dark\">\r\n            <tbody>\r\n              {countries.map((el) => (\r\n                <tr\r\n                  key={el.country}\r\n                  onClick={() => onCountryClick(el)}\r\n                  className={countryCode === el.countryInfo.iso3 ? 'country_selected' : ''}\r\n                >\r\n                  <td>\r\n                    <img src={el.countryInfo.flag} alt={el.country} className=\"country__flag\" />\r\n                  </td>\r\n                  <td className=\"country__cases\">\r\n                    {isFor100\r\n                      ? el.for100Data?.toLocaleString('ru')\r\n                      : el[currShowingDataForPeriod]?.toLocaleString('ru')}\r\n                  </td>\r\n                  <td className=\"country__name\">{el.country}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nCountryList.propTypes = {\r\n  countriesList: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  countryCode: PropTypes.string.isRequired,\r\n  selectCountry: PropTypes.func.isRequired,\r\n  showingData: PropTypes.string.isRequired,\r\n  isFor100: PropTypes.bool.isRequired,\r\n  isLastDay: PropTypes.bool.isRequired,\r\n  population: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default CountryList;\r\n","import React, { useCallback, useState, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.light.css';\r\nimport Chart, {\r\n  ArgumentAxis,\r\n  Series,\r\n  CommonSeriesSettings,\r\n  CommonAxisSettings,\r\n  Grid,\r\n  Label,\r\n  Format,\r\n  ValueAxis,\r\n  Tooltip,\r\n} from 'devextreme-react/chart';\r\nimport ExpandBtn from '../ExpandBtn/ExpandBtn';\r\nimport { WHOLE_WORLD_NAME } from '../../data/constants';\r\nimport { countFor100 } from '../../helpers/helpers';\r\nimport './Charts.scss';\r\n\r\nconst Charts = React.memo(({ chartsList, countryName, isFor100, population, countryPopulation }) => {\r\n  const [isFullScreenSize, setIsFullScreenSize] = useState(false);\r\n\r\n  const dataWithPer100 = useMemo(() => {\r\n    const populationCount = countryName === WHOLE_WORLD_NAME ? population : countryPopulation;\r\n    return chartsList?.map((item) => ({\r\n      ...item,\r\n      casesIsFor100: countFor100(item.cases, populationCount),\r\n      deathsIsFor100: countFor100(item.deaths, populationCount),\r\n      recoveredIsFor100: countFor100(item.recovered, populationCount),\r\n    }));\r\n  }, [chartsList, countryName, population]);\r\n\r\n  const customizeTooltip = useCallback((pointInfo) => ({\r\n    text: `${pointInfo.argumentText}<br/>${pointInfo.value.toLocaleString('ru')}`,\r\n  }));\r\n\r\n  const size = useMemo(() => (isFullScreenSize ? { height: '100%', width: '100%' } : { height: '350', width: '350' }), [\r\n    isFullScreenSize,\r\n  ]);\r\n\r\n  return (\r\n    <div className={isFullScreenSize ? 'chart-container full-container' : 'chart-container'}>\r\n      <ExpandBtn setIsFullScreenSize={setIsFullScreenSize} isFullScreenSize={isFullScreenSize} />\r\n      <Chart dataSource={dataWithPer100} title={countryName ?? WHOLE_WORLD_NAME} theme=\"generic.darkmoon\" size={size}>\r\n        <CommonSeriesSettings argumentField=\"data\" type=\"spline\" />\r\n        <CommonAxisSettings>\r\n          <Grid />\r\n        </CommonAxisSettings>\r\n        <Series valueField={isFor100 ? 'casesIsFor100' : 'cases'} name=\"Cases\" />\r\n        <Series valueField={isFor100 ? 'deathsIsFor100' : 'deaths'} name=\"Deaths\" />\r\n        <Series valueField={isFor100 ? 'recoveredIsFor100' : 'recovered'} name=\"Recovered\" />\r\n        <ArgumentAxis>\r\n          <Label>\r\n            <Format type=\"string\" />\r\n          </Label>\r\n        </ArgumentAxis>\r\n        <ValueAxis allowDecimals>\r\n          <Label>\r\n            <Format type=\"decimal\" />\r\n          </Label>\r\n        </ValueAxis>\r\n        <Tooltip enabled customizeTooltip={customizeTooltip} zIndex=\"101\" />\r\n      </Chart>\r\n    </div>\r\n  );\r\n});\r\n\r\nCharts.propTypes = {\r\n  chartsList: PropTypes.arrayOf(PropTypes.object),\r\n  countryName: PropTypes.string.isRequired,\r\n  isFor100: PropTypes.bool.isRequired,\r\n  population: PropTypes.number.isRequired,\r\n  countryPopulation: PropTypes.number.isRequired,\r\n};\r\n\r\nCharts.defaultProps = {\r\n  chartsList: [],\r\n};\r\nexport default Charts;\r\n","import Dropdown from 'react-bootstrap/Dropdown';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as constants from '../../data/constants';\r\n\r\nconst DropdownDisplayOptions = ({ setCurrShowingData, options, selectedKey }) => {\r\n  const handleSelect = (e) => {\r\n    setCurrShowingData(e);\r\n  };\r\n  return (\r\n    <Dropdown onSelect={handleSelect}>\r\n      <Dropdown.Toggle className=\"dropdown-toggle\" key=\"info\" variant=\"info\" title=\"variants\">\r\n        {selectedKey ? constants.VARIANTS_FOR_DISPLAYING[selectedKey] : 'Variants for displaying'}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        {Object.keys(options).map((key) => (\r\n          <Dropdown.Item key={`dropdown-variants-${key}`} id={`dropdown-variants-${key}`} eventKey={key}>\r\n            {constants.VARIANTS_FOR_DISPLAYING[key]}\r\n          </Dropdown.Item>\r\n        ))}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n};\r\n\r\nDropdownDisplayOptions.propTypes = {\r\n  options: PropTypes.objectOf(PropTypes.any).isRequired,\r\n  setCurrShowingData: PropTypes.func.isRequired,\r\n  selectedKey: PropTypes.string,\r\n};\r\n\r\nDropdownDisplayOptions.defaultProps = {\r\n  selectedKey: '',\r\n};\r\n\r\nexport default DropdownDisplayOptions;\r\n","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Switcher = ({ handleOnChange, label, id, checked }) => (\r\n  <Form.Check onChange={handleOnChange} checked={checked} type=\"switch\" id={id} label={label} />\r\n);\r\nexport default Switcher;\r\n\r\nSwitcher.propTypes = {\r\n  handleOnChange: PropTypes.func.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  checked: PropTypes.bool,\r\n};\r\n\r\nSwitcher.defaultProps = {\r\n  checked: 'false',\r\n};\r\n","import React, { useContext, useCallback } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Switcher from './Switcher';\r\nimport { CommonContext } from '../../Providers/CommonProvider';\r\n\r\nconst FilterForm = () => {\r\n  const { isFor100, changeIsFor100, isLastDay, changeSelectedPeriod } = useContext(CommonContext);\r\n  const switcherFor100 = { label: 'per 100,000 population', id: 'tableSwitcher' };\r\n  const periodSwitcher = { label: 'for the last day', id: 'periodSwitcher' };\r\n\r\n  const handleIsFor100 = useCallback(() => {\r\n    changeIsFor100(!isFor100);\r\n  });\r\n\r\n  const handleSelectedPeriod = useCallback(() => {\r\n    changeSelectedPeriod(!isLastDay);\r\n  });\r\n\r\n  return (\r\n    <Form className=\"filter-form\">\r\n      <Switcher\r\n        className=\"period-switcher\"\r\n        handleOnChange={handleSelectedPeriod}\r\n        label={periodSwitcher.label}\r\n        id={periodSwitcher.id}\r\n        checked={isLastDay}\r\n      />\r\n      <Switcher\r\n        handleOnChange={handleIsFor100}\r\n        label={switcherFor100.label}\r\n        id={switcherFor100.id}\r\n        checked={isFor100}\r\n      />\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default FilterForm;\r\n","import React, { useContext } from 'react';\r\nimport './FilterCommon.scss';\r\nimport * as constants from '../../data/constants';\r\nimport DropdownDisplayOptions from '../DropdownDisplayOptions/DropdownDisplayOptions';\r\nimport FilterForm from './FilterForm';\r\nimport { CommonContext } from '../../Providers/CommonProvider';\r\n\r\nconst FilterCommon = () => {\r\n  const { showingData, changeShowingData, isFullScreenOptions } = useContext(CommonContext);\r\n\r\n  return (\r\n    <div className={isFullScreenOptions ? 'filter filter__full' : 'filter'}>\r\n      <DropdownDisplayOptions\r\n        setCurrShowingData={changeShowingData}\r\n        options={constants.VARIANTS_FOR_DISPLAYING}\r\n        selectedKey={showingData}\r\n      />\r\n      <FilterForm />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterCommon;\r\n","import React, { useCallback, useMemo } from 'react';\r\nimport { GeoJSON } from 'react-leaflet';\r\nimport PropTypes from 'prop-types';\r\nimport L from 'leaflet';\r\nimport * as constants from '../../data/constants';\r\n\r\nconst GeojsonView = React.memo(({ currShowingData, responseData, selectCountry, isFor100, isLastDay, countries }) => {\r\n  const handleGeojson = useCallback(\r\n    (code) => {\r\n      const isCountryExists = responseData.find((el) => el.countryInfo.iso3 === code);\r\n      if (isCountryExists.country) {\r\n        selectCountry({ code, name: isCountryExists.country, population: isCountryExists.population });\r\n      }\r\n    },\r\n    [responseData, selectCountry],\r\n  );\r\n\r\n  const geojsonStyle = useMemo(() => ({ weight: 0, fillOpacity: 0 }), []);\r\n\r\n  return (\r\n    <GeoJSON\r\n      key=\"my-geojson\"\r\n      data={countries.features}\r\n      style={geojsonStyle}\r\n      onEachFeature={(feature, layer) => {\r\n        // eslint-disable-next-line no-param-reassign\r\n        feature.properties.tooltipText = `${constants.VARIANTS_FOR_DISPLAYING[currShowingData]} ${\r\n          isLastDay ? 'for last day' : 'for whole period'\r\n        } ${isFor100 ? 'per 100K' : ''} <br> for: ${feature.properties.name} `;\r\n\r\n        layer.on({\r\n          click: () => {\r\n            handleGeojson(feature.properties.ISO_A3);\r\n          },\r\n          mouseover(e) {\r\n            const activeFeature = e.target.feature;\r\n            layer\r\n              .bindTooltip(activeFeature.properties.tooltipText, {\r\n                closeButton: false,\r\n                offset: L.point(0, -20),\r\n                sticky: true,\r\n                className: 'toolTip',\r\n              })\r\n              .openTooltip();\r\n          },\r\n          mouseout() {\r\n            layer.unbindTooltip(feature.properties.name);\r\n          },\r\n        });\r\n      }}\r\n    />\r\n  );\r\n});\r\n\r\nGeojsonView.propTypes = {\r\n  responseData: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  selectCountry: PropTypes.func.isRequired,\r\n  currShowingData: PropTypes.string.isRequired,\r\n  isFor100: PropTypes.bool.isRequired,\r\n  isLastDay: PropTypes.bool.isRequired,\r\n  countries: PropTypes.objectOf(PropTypes.any),\r\n};\r\n\r\nGeojsonView.defaultProps = {\r\n  countries: {},\r\n};\r\n\r\nexport default GeojsonView;\r\n","import React, { useMemo } from 'react';\r\nimport 'mapbox-gl-leaflet';\r\nimport PropTypes from 'prop-types';\r\nimport * as constants from '../../data/constants';\r\n\r\nconst Legend = React.memo(({ boundaries }) => {\r\n  const layers = useMemo(\r\n    () => ({\r\n      low: `0 - ${boundaries.firstBoundary}`,\r\n      medium: `${boundaries.firstBoundary} - ${boundaries.secondBoundary}`,\r\n      hight: `${boundaries.secondBoundary} and above`,\r\n    }),\r\n    [boundaries],\r\n  );\r\n\r\n  const legendKeys = useMemo(() => {\r\n    const layersArray = Object.keys(layers);\r\n    return layersArray.map((key) => (\r\n      <div key={layers[key] + constants.COLORS[key]}>\r\n        <span style={{ backgroundColor: constants.COLORS[key] }} className=\"legend-key\" />\r\n        <span>{layers[key]}</span>\r\n      </div>\r\n    ));\r\n  }, [layers]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"map-overlay\" id=\"legend\">\r\n        {legendKeys}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nLegend.propTypes = {\r\n  boundaries: PropTypes.objectOf(PropTypes.any),\r\n};\r\n\r\nLegend.defaultProps = {\r\n  boundaries: '',\r\n};\r\n\r\nexport default Legend;\r\n","import React, { useMemo } from 'react';\r\nimport { divIcon } from 'leaflet';\r\nimport { Marker } from 'react-leaflet';\r\nimport PropTypes from 'prop-types';\r\nimport Legend from './Legend';\r\nimport { countFor100, getBoundary, getDataForPeriod } from '../../helpers/helpers';\r\n\r\nconst RenderOverlay = React.memo(({ responseData, showingData, selectCountry, isFor100, isLastDay }) => {\r\n  let boundaries = useMemo(() => ({ firstBoundary: 0, secondBoundary: 0 }), []);\r\n\r\n  const getIntensity = (data) => {\r\n    if (data <= boundaries.firstBoundary) {\r\n      return 'low';\r\n    }\r\n    if (data > boundaries.firstBoundary && data <= boundaries.secondBoundary) {\r\n      return 'medium';\r\n    }\r\n    return 'hight';\r\n  };\r\n\r\n  const customMarkerIcon = (data) => {\r\n    const intensity = getIntensity(data);\r\n    return divIcon({\r\n      html: `<span class=\"icon-marker-${intensity}\">${data}</span>`,\r\n    });\r\n  };\r\n\r\n  const currShowingDataForPeriod = useMemo(() => getDataForPeriod(isLastDay, showingData), [isLastDay, showingData]);\r\n\r\n  const covidData = useMemo(() => {\r\n    if (isFor100) {\r\n      return responseData.map((el) => ({\r\n        value: countFor100(el[currShowingDataForPeriod], el.population),\r\n        countryInfo: el.countryInfo,\r\n        country: el.country,\r\n        population: el.population,\r\n      }));\r\n    }\r\n    return responseData.map((el) => ({\r\n      value: el[currShowingDataForPeriod],\r\n      countryInfo: el.countryInfo,\r\n      country: el.country,\r\n      population: el.population,\r\n    }));\r\n  }, [isFor100, responseData, currShowingDataForPeriod]);\r\n\r\n  boundaries = useMemo(() => getBoundary(covidData.map((el) => el.value)), [covidData]);\r\n\r\n  return (\r\n    <>\r\n      {covidData.map((element) => (\r\n        <Marker\r\n          key={element.country}\r\n          position={[element.countryInfo.lat, element.countryInfo.long]}\r\n          icon={customMarkerIcon(element.value)}\r\n          eventHandlers={{\r\n            click: () => {\r\n              selectCountry({ code: element.countryInfo.iso3, name: element.country, population: element.population });\r\n            },\r\n          }}\r\n        />\r\n      ))}\r\n      <Legend boundaries={boundaries} />\r\n    </>\r\n  );\r\n});\r\n\r\nRenderOverlay.propTypes = {\r\n  responseData: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  selectCountry: PropTypes.func.isRequired,\r\n  showingData: PropTypes.string.isRequired,\r\n  isFor100: PropTypes.bool.isRequired,\r\n  isLastDay: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default RenderOverlay;\r\n","import React, { useState, useEffect, useContext, useMemo } from 'react';\r\nimport './App.scss';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { NotifyContext } from './Providers/NotifyProvider';\r\nimport { CommonContext } from './Providers/CommonProvider';\r\nimport DashboardTable from './components/TableComponents/DashboardTable';\r\nimport InteractiveMap from './components/MapComponents/InteractiveMap';\r\nimport Footer from './components/Footer/Footer';\r\nimport Header from './components/Header/Header';\r\nimport requestService from './services/requests';\r\nimport * as constants from './data/constants';\r\nimport Alerts from './components/Alerts/Alerts';\r\nimport Loader from './components/Loader/Loader';\r\nimport CountryList from './components/CountryList/CountryList';\r\nimport Charts from './components/Charts/Charts';\r\nimport FilterCommon from './components/FilterCommon/FilterCommon';\r\nimport GeojsonView from './components/MapComponents/GeojsonView';\r\nimport RenderOverlay from './components/MapComponents/RenderOverlay';\r\n\r\nconst App = () => {\r\n  const { notify, addNotify } = useContext(NotifyContext);\r\n  const { currentCountry, changePopulation, showingData, selectCountry, isFor100, isLastDay, population } = useContext(\r\n    CommonContext,\r\n  );\r\n  const [info, setInfo] = useState(null);\r\n  const [geoJson, setGeoJson] = useState(null);\r\n  const [infoWorld, setInfoWorld] = useState(null);\r\n  const [history, setHistory] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const getCovidInfo = async () => {\r\n    const covidInfo = await requestService.getCovidInfo();\r\n    setInfo(covidInfo);\r\n  };\r\n  const getWorldGeojson = async () => {\r\n    const geoJsonWorld = await requestService.getGeojson();\r\n    setGeoJson(geoJsonWorld);\r\n  };\r\n\r\n  const getCovidInfoWorld = async () => {\r\n    const covidInfoWorld = await requestService.getCovidInfoWorld();\r\n    setInfoWorld(covidInfoWorld);\r\n    changePopulation(covidInfoWorld.population);\r\n  };\r\n\r\n  const getCovidHistory = async (country) => {\r\n    const data = await requestService.getCovidHistory(country);\r\n    const covidHistory = country === 'all' ? data : data.timeline;\r\n    const arrayForChart = Object.entries(covidHistory).reduce((acc, item) => {\r\n      Object.entries(item[1]).forEach((el) => {\r\n        const obj = acc.find((i) => i.data === el[0]);\r\n        if (obj) {\r\n          [, obj[item[0]]] = el;\r\n        } else {\r\n          const day = {};\r\n          [, day[item[0]]] = el;\r\n          [day.data] = el;\r\n          acc.push(day);\r\n        }\r\n      }, []);\r\n\r\n      return acc;\r\n    }, []);\r\n    setHistory(arrayForChart);\r\n  };\r\n\r\n  const getAllData = async () => {\r\n    try {\r\n      await getCovidInfo();\r\n      await getCovidInfoWorld();\r\n      await getWorldGeojson();\r\n    } catch (exception) {\r\n      addNotify(constants.NOTIFY_TYPES.error, constants.ERROR_HEADER, constants.ERROR_MESSAGE);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(async () => {\r\n    try {\r\n      const country = currentCountry.name === constants.WHOLE_WORLD_NAME ? 'all' : currentCountry.name;\r\n      await getCovidHistory(country);\r\n    } catch (exception) {\r\n      addNotify(constants.NOTIFY_TYPES.error, constants.ERROR_HEADER, constants.ERROR_MESSAGE);\r\n    }\r\n  }, [currentCountry]);\r\n\r\n  useEffect(() => {\r\n    getAllData();\r\n  }, []);\r\n\r\n  const renderTable = useMemo(\r\n    () => (\r\n      <DashboardTable\r\n        responseData={info}\r\n        responseDataWorld={infoWorld}\r\n        currentCountry={currentCountry}\r\n        isFor100={isFor100}\r\n        isLastDay={isLastDay}\r\n      />\r\n    ),\r\n    [info, infoWorld, currentCountry, isFor100, isLastDay],\r\n  );\r\n\r\n  const renderGeoJsonView = useMemo(\r\n    () => (\r\n      <GeojsonView\r\n        currShowingData={showingData}\r\n        responseData={info ?? []}\r\n        selectCountry={selectCountry}\r\n        isFor100={isFor100}\r\n        isLastDay={isLastDay}\r\n        countries={geoJson}\r\n      />\r\n    ),\r\n    [showingData, info, selectCountry, isFor100, isLastDay, geoJson],\r\n  );\r\n\r\n  const renderOverlay = useMemo(\r\n    () => (\r\n      <RenderOverlay\r\n        responseData={info ?? []}\r\n        showingData={showingData}\r\n        selectCountry={selectCountry}\r\n        isFor100={isFor100}\r\n        isLastDay={isLastDay}\r\n      />\r\n    ),\r\n    [showingData, info, selectCountry, isFor100, isLastDay],\r\n  );\r\n\r\n  return isLoading ? (\r\n    <Loader />\r\n  ) : (\r\n    <>\r\n      <div className=\"content\">\r\n        <Container fluid className=\"main-wrapper\">\r\n          {notify ? <Alerts /> : null}\r\n          <Header />\r\n          <FilterCommon />\r\n          <div className=\"widget-wrapper\">\r\n            <div className=\"list-col\">\r\n              <CountryList\r\n                countriesList={info}\r\n                countryCode={currentCountry.code}\r\n                selectCountry={selectCountry}\r\n                showingData={showingData}\r\n                isFor100={isFor100}\r\n                isLastDay={isLastDay}\r\n                population={population}\r\n              />\r\n            </div>\r\n            <div className=\"map-col\">\r\n              <InteractiveMap\r\n                responseData={info ?? []}\r\n                countryCode={currentCountry.code}\r\n                GeojsonView={renderGeoJsonView}\r\n                renderOverlay={renderOverlay}\r\n              />\r\n            </div>\r\n            <div className=\"chart-col\">\r\n              <div>{renderTable}</div>\r\n              <div>\r\n                <Charts\r\n                  chartsList={history}\r\n                  countryName={currentCountry.name}\r\n                  isFor100={isFor100}\r\n                  population={population}\r\n                  countryPopulation={currentCountry.population}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Container>\r\n      </div>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport NotifyProvider from './Providers/NotifyProvider';\r\nimport CommonProvider from './Providers/CommonProvider';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <NotifyProvider>\r\n      <CommonProvider>\r\n        <App />\r\n      </CommonProvider>\r\n    </NotifyProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}